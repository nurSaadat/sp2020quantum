{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'IBMQ'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-79018b0c8101>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mqiskit\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mClassicalRegister\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mQuantumRegister\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mqiskit\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mQuantumCircuit\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcompile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexecute\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mIBMQ\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mqiskit\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mBasicAer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mqiskit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtools\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisualization\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcircuit_drawer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mqiskit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtools\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvisualization\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mplot_histogram\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mImportError\u001b[0m: cannot import name 'IBMQ'"
     ]
    }
   ],
   "source": [
    "from qiskit import ClassicalRegister, QuantumRegister\n",
    "from qiskit import QuantumCircuit,compile, execute,IBMQ\n",
    "from qiskit import BasicAer\n",
    "from qiskit.tools.visualization import circuit_drawer\n",
    "from qiskit.tools.visualization import plot_histogram\n",
    "from qiskit.providers.ibmq import least_busy\n",
    "from math import pi\n",
    "from qiskit.mapper._layout import Layout as Ibmlayout\n",
    "from qiskit.tools.compiler import compile as qcompile\n",
    "import matplotlib.pyplot as plt\n",
    "import sys\n",
    "from qiskit.tools.visualization import circuit_drawer\n",
    "from parseRealization import *\n",
    "from copy import deepcopy\n",
    "%matplotlib inline\n",
    "testDir=\"./tests/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#select a backend\n",
    "IBMQ.load_accounts()\n",
    "backends = IBMQ.backends(simulator=False,filters=lambda x: x.configuration().n_qubits > 4)\n",
    "print(backends)\n",
    "#print(available)\n",
    "#least_busy = BasicAer.get_backend('qasm_simulator')\n",
    "least_busy = IBMQ.get_backend('ibmq_16_melbourne')\n",
    "couplingMap = least_busy.configuration().coupling_map\n",
    "print(couplingMap,\"its length:\",len(couplingMap))\n",
    "qubitsSize = least_busy.configuration().n_qubits\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepareIBMQLayout(qReg,layout):\n",
    "    ibmLayout = {}\n",
    "    for elem in layout:\n",
    "       # print(\"Element in layout is\",elem,\" physical is\",layout[elem])\n",
    "        quantum = ord(elem)-ord(\"a\")\n",
    "        physical = ord(layout[elem])-ord(\"a\")\n",
    "        quantumTuple = (qReg.name, quantum)\n",
    "        ibmLayout[quantumTuple]=(qReg.name,physical)\n",
    "    #print(\"tempDictionary\",ibmLayout)\n",
    "    #print(\"items are\",ibmLayout.items())\n",
    "    #print(\"IBMLAYOUT\")\n",
    "    #print(ibmLayout)\n",
    "    return ibmLayout\n",
    "\n",
    "def bigFunction(fileName):\n",
    "    ioClass = readCircuitInformation(fileName) \n",
    "    answers = ioClass.getKmap()\n",
    "\n",
    "    ioClass.readGatesFromFile(fileName)\n",
    "    size = ioClass.getSize()\n",
    "    backend_sim = BasicAer.get_backend('qasm_simulator')\n",
    "    error_count = 0\n",
    "    \n",
    "    ctg = CircuitTransitionGraph()\n",
    "    tempStuff = ctg.transformCoupling(couplingMap)\n",
    "    print(tempStuff,len(tempStuff))\n",
    "    ctg.setSize(size)\n",
    "   \n",
    "    leastCost = 2000000\n",
    "    defaultIBMCost = 100000\n",
    "    finalAnswer = []\n",
    "    finalLayout = []\n",
    "    costHistory =[]\n",
    "    ibmCostHistory = []\n",
    "    for i in range(0,1):\n",
    "        epoch = 0\n",
    "        #This part corresponds for part of experiment without minimal or no changes\n",
    "        while epoch < 10:\n",
    "            print(\"Epoch number:\",epoch)\n",
    "            print(\"Current layout of ctg is:\",ctg.layout)\n",
    "            tempLayout = ctg.layout.copy()\n",
    "            qr,cr,qc = ioClass.createCircuitAndSetInput(i)\n",
    "            ibmLayout = prepareIBMQLayout(qr,tempLayout)\n",
    "            qc,qr = ctg.readGatesFromIOClass(qr,qc, ioClass)\n",
    "            if epoch==0:\n",
    "                defaultIBMCost = measureFidelityWithoutChanges(qr,cr,qc)\n",
    "            ctg = fixTheStuff(ctg)\n",
    "            #This one needs to comply with changes you did\n",
    "            #qc,qr = ctg.readFixedGatesFromCtg(qr,qc)\n",
    "           \n",
    "            qr,cr,qc = ioClass.createCircuitAndSetInput(i)\n",
    "            qc,qr = ctg.readFixedGatesFromCtg(qr,qc)\n",
    "            ibmLayout = prepareIBMQLayout(qr,tempLayout)\n",
    "            tempCost = compileToSeeCost(qr,cr,qc,ioClass,ibmLayout,i)\n",
    "            ibmCostHistory.append(tempCost)\n",
    "            costHistory.append(len(ctg.lines))\n",
    "            if tempCost < leastCost:\n",
    "                finalAnswer = deepcopy(ctg.lines)\n",
    "                finalLayout = deepcopy(tempLayout)\n",
    "                leastCost = tempCost\n",
    "            #measureToVerifyOutputWtihChanges(qr,cr,qc,ioClass,ibmLayout,i)\n",
    "            ctg.layOutQubits()\n",
    "            epoch = epoch+1\n",
    "    for i in range(0,len(costHistory)):\n",
    "        for j in range(0,len(costHistory)):\n",
    "            if costHistory[i] < costHistory[j]:\n",
    "                tempI = ibmCostHistory[j]\n",
    "                temp = costHistory[j]\n",
    "                costHistory[j]=costHistory[i]\n",
    "                ibmCostHistory[j]=ibmCostHistory[i]\n",
    "                costHistory[i] = temp\n",
    "                ibmCostHistory[i] = tempI\n",
    "    print(\"Default IBM cost is:\",defaultIBMCost)\n",
    "    print(\"FinalAnswer is:\", finalAnswer)\n",
    "    print(\"FinalAnswer finalLayout:\", finalLayout)\n",
    "    print(\"FinalAnswer cost is:\",leastCost)\n",
    "    print(\"CostHistory is:\",costHistory)\n",
    "    print(\"IBMCostHistory is:\",ibmCostHistory)   \n",
    "   \n",
    "    plt.plot(ibmCostHistory,costHistory)\n",
    "\n",
    "    \n",
    "def fixTheStuff(ctg):\n",
    "    print(\"Missing connections are\",ctg.getMissingConnections())\n",
    "    #This one to fix the changes... fixthemissingedges connects stuff around. did not test though\n",
    "    ctg.fixMissingEdges()\n",
    "    #print(\"FIxing the stuff\")\n",
    "    return ctg\n",
    "\n",
    "\n",
    "def  compileToSeeCost(qr,cr,qc,ioClass,ibmLayout,i):\n",
    "    #least_busy = BasicAer.get_backend('qasm_simulator')\n",
    "    qc.measure(qr,cr)\n",
    "    qobj = qcompile(qc,least_busy,initial_layout=ibmLayout,pass_manager=None)\n",
    "    #This line provides print of the compiled circuit qasm\n",
    "    print(\"Length of IBM compiled circuit with fixes is:\",len(qobj.experiments[0].header.as_dict()[\"compiled_circuit_qasm\"]))\n",
    "    return len(qobj.experiments[0].header.as_dict()[\"compiled_circuit_qasm\"])\n",
    "    #job = execute(qc,least_busy,shots=200)\n",
    "    #result = job.result()\n",
    "    #print(result.get_counts())\n",
    "    #plot_histogram(result.get_counts())\n",
    "    \n",
    "def measureFidelityWithoutChanges(qr,cr,qc):\n",
    "    #least_busy = BasicAer.get_backend('qasm_simulator')\n",
    "    qc.measure(qr,cr)\n",
    "    \n",
    "    qobj = qcompile(qc,least_busy,initial_layout=None,pass_manager=None)\n",
    "    #This line provides print of the compiled circuit qasm\n",
    "    print(\"Length of IBM compiled circuit is:\",len(qobj.experiments[0].header.as_dict()[\"compiled_circuit_qasm\"]))\n",
    "    return len(qobj.experiments[0].header.as_dict()[\"compiled_circuit_qasm\"])\n",
    "#This needs to be implemented    \n",
    "def measureToVerifyOutputWtihChanges(qr,cr,qc,ioClass,ibmLayout,i):\n",
    "    least_busy = BasicAer.get_backend('qasm_simulator')\n",
    "    qc.measure(qr,cr)\n",
    "    job = execute(qc,least_busy,initial_layout=ibmLayout,shots=300)\n",
    "    result = job.result()\n",
    "    print(result.get_counts())\n",
    "    error = ioClass.checkOutputs(result.get_counts(),i)\n",
    "    if error != 0 :\n",
    "        print(\"ERROR APPEARED\")\n",
    "        raise SystemError\n",
    "    #plot_histogram(result.get_counts())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "goodExamples = [\"sym6_63\",\"0410184\",\"ex1\",\"hwb4_52\",\"parity\"]\n",
    "fileName=goodExamples[0]\n",
    "#if testFromFile(filename) == 0:\n",
    "fileName = testDir+fileName\n",
    "bigFunction(fileName)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
