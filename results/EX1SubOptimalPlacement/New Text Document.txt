./tests/ex1.pla
The constants are set to .constants 0-----

The circuit has garbage lines in it or file parsed incorrectly, check ioclass
The circuit has constant inputs in it or file parsed incorrectly, check ioclass
['ab', 'bc', 'cd', 'de', 'ek', 'ef', 'fg', 'fj', 'gi', 'hi', 'ij', 'jk', 'dl', 'kl', 'lm', 'cm', 'bn', 'mn'] 18
Current layout of ctg is: {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f'}
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
tempDictionary {('q0', 0): ('q0', 0), ('q0', 1): ('q0', 1), ('q0', 2): ('q0', 2), ('q0', 3): ('q0', 3), ('q0', 4): ('q0', 4), ('q0', 5): ('q0', 5)}
items are dict_items([(('q0', 0), ('q0', 0)), (('q0', 1), ('q0', 1)), (('q0', 2), ('q0', 2)), (('q0', 3), ('q0', 3)), (('q0', 4), ('q0', 4)), (('q0', 5), ('q0', 5))])
IBMLAYOUT
{('q0', 0): ('q0', 0), ('q0', 1): ('q0', 1), ('q0', 2): ('q0', 2), ('q0', 3): ('q0', 3), ('q0', 4): ('q0', 4), ('q0', 5): ('q0', 5)}
['t2 d a\n', 't2 b a\n', 't2 f a\n', 't1 c\n', 't2 c a\n', 't1 e\n', 't2 e a\n']
Length of IBM compiled circuit is: 666
Self skeleton is ['ad', 'ab', 'af', 'ac', 'ae']
Missing connections are [['a', 'd'], ['a', 'f'], ['a', 'c'], ['a', 'e']]
Paths to a d
SELF POSSIBLE PATH IS [['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'm', 'l', 'd'], ['a', 'b', 'c', 'm', 'l', 'k', 'j', 'f', 'e', 'd'], ['a', 'b', 'c', 'm', 'l', 'k', 'j', 'i', 'g', 'f', 'e', 'd'], ['a', 'b', 'c', 'm', 'l', 'k', 'e', 'd'], ['a', 'b', 'n', 'm', 'l', 'd'], ['a', 'b', 'n', 'm', 'l', 'k', 'j', 'f', 'e', 'd'], ['a', 'b', 'n', 'm', 'l', 'k', 'j', 'i', 'g', 'f', 'e', 'd'], ['a', 'b', 'n', 'm', 'l', 'k', 'e', 'd'], ['a', 'b', 'n', 'm', 'c', 'd']]
ASSIGN: ['a', 'b', 'c', 'd']
Smallist is [myindex] is: ['a', 'b', 'c', 'd']  its length is 4
['d', 'a'] ['a', 'd']
replaceTo ['a', 'b', 'c', 'd']
Thing to replace ['a', 'c']
sw a b
sw b c
CNOT REPLACEMENT IS: t2 d c
Paths to a f
SELF POSSIBLE PATH IS [['a', 'b', 'c', 'd', 'l', 'k', 'j', 'f'], ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f'], ['a', 'b', 'c', 'd', 'l', 'k', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'k', 'j', 'f'], ['a', 'b', 'c', 'd', 'e', 'k', 'j', 'i', 'g', 'f'], ['a', 'b', 'c', 'm', 'l', 'd', 'e', 'f'], ['a', 'b', 'c', 'm', 'l', 'd', 'e', 'k', 'j', 'f'], ['a', 'b', 'c', 'm', 'l', 'd', 'e', 'k', 'j', 'i', 'g', 'f'], ['a', 'b', 'c', 'm', 'l', 'k', 'j', 'f'], ['a', 'b', 'c', 'm', 'l', 'k', 'j', 'i', 'g', 'f'], ['a', 'b', 'c', 'm', 'l', 'k', 'e', 'f'], ['a', 'b', 'n', 'm', 'l', 'd', 'e', 'f'], ['a', 'b', 'n', 'm', 'l', 'd', 'e', 'k', 'j', 'f'], ['a', 'b', 'n', 'm', 'l', 'd', 'e', 'k', 'j', 'i', 'g', 'f'], ['a', 'b', 'n', 'm', 'l', 'k', 'j', 'f'], ['a', 'b', 'n', 'm', 'l', 'k', 'j', 'i', 'g', 'f'], ['a', 'b', 'n', 'm', 'l', 'k', 'e', 'f'], ['a', 'b', 'n', 'm', 'c', 'd', 'l', 'k', 'j', 'f'], ['a', 'b', 'n', 'm', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f'], ['a', 'b', 'n', 'm', 'c', 'd', 'l', 'k', 'e', 'f'], ['a', 'b', 'n', 'm', 'c', 'd', 'e', 'f'], ['a', 'b', 'n', 'm', 'c', 'd', 'e', 'k', 'j', 'f'], ['a', 'b', 'n', 'm', 'c', 'd', 'e', 'k', 'j', 'i', 'g', 'f']]
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'f']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'f']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'f']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'e', 'f']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'e', 'f']
ASSIGN: ['a', 'b', 'c', 'd', 'e', 'f']
Smallist is [myindex] is: ['a', 'b', 'c', 'd', 'e', 'f']  its length is 6
['d', 'c'] ['a', 'f']
['b', 'a'] ['a', 'f']
['f', 'a'] ['a', 'f']
replaceTo ['a', 'b', 'c', 'd', 'e', 'f']
Thing to replace ['a', 'e']
sw a b
sw b c
sw c d
sw d e
CNOT REPLACEMENT IS: t2 f e
Paths to a c
SELF POSSIBLE PATH IS [['a', 'b', 'c'], ['a', 'b', 'n', 'm', 'l', 'd', 'c'], ['a', 'b', 'n', 'm', 'l', 'k', 'j', 'f', 'e', 'd', 'c'], ['a', 'b', 'n', 'm', 'l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c'], ['a', 'b', 'n', 'm', 'l', 'k', 'e', 'd', 'c'], ['a', 'b', 'n', 'm', 'c']]
ASSIGN: ['a', 'b', 'c']
Smallist is [myindex] is: ['a', 'b', 'c']  its length is 3
['d', 'c'] ['a', 'c']
['b', 'a'] ['a', 'c']
['f', 'e'] ['a', 'c']
['c', 'a'] ['a', 'c']
replaceTo ['a', 'b', 'c']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 c b
Paths to a e
SELF POSSIBLE PATH IS [['a', 'b', 'c', 'd', 'l', 'k', 'j', 'f', 'e'], ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f', 'e'], ['a', 'b', 'c', 'd', 'l', 'k', 'e'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'm', 'l', 'd', 'e'], ['a', 'b', 'c', 'm', 'l', 'k', 'j', 'f', 'e'], ['a', 'b', 'c', 'm', 'l', 'k', 'j', 'i', 'g', 'f', 'e'], ['a', 'b', 'c', 'm', 'l', 'k', 'e'], ['a', 'b', 'n', 'm', 'l', 'd', 'e'], ['a', 'b', 'n', 'm', 'l', 'k', 'j', 'f', 'e'], ['a', 'b', 'n', 'm', 'l', 'k', 'j', 'i', 'g', 'f', 'e'], ['a', 'b', 'n', 'm', 'l', 'k', 'e'], ['a', 'b', 'n', 'm', 'c', 'd', 'l', 'k', 'j', 'f', 'e'], ['a', 'b', 'n', 'm', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f', 'e'], ['a', 'b', 'n', 'm', 'c', 'd', 'l', 'k', 'e'], ['a', 'b', 'n', 'm', 'c', 'd', 'e']]
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'f', 'e']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'f', 'e']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'f', 'e']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f', 'e']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f', 'e']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f', 'e']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f', 'e']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'j', 'i', 'g', 'f', 'e']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'e']
GOTCHA: ['a', 'b', 'c', 'd', 'l', 'k', 'e']
ASSIGN: ['a', 'b', 'c', 'd', 'e']
Smallist is [myindex] is: ['a', 'b', 'c', 'd', 'e']  its length is 5
['d', 'c'] ['a', 'e']
['b', 'a'] ['a', 'e']
['f', 'e'] ['a', 'e']
['c', 'b'] ['a', 'e']
['e', 'a'] ['a', 'e']
replaceTo ['a', 'b', 'c', 'd', 'e']
Thing to replace ['a', 'd']
sw a b
sw b c
sw c d
CNOT REPLACEMENT IS: t2 e d
Lines are: ['sw a b', 'sw b c', 't2 d c', 'sw b c', 'sw a b', 't2 b a\n', 'sw a b', 'sw b c', 'sw c d', 'sw d e', 't2 f e', 'sw d e', 'sw c d', 'sw b c', 'sw a b', 't1 c\n', 'sw a b', 't2 c b', 'sw a b', 't1 e\n', 'sw a b', 'sw b c', 'sw c d', 't2 e d', 'sw c d', 'sw b c', 'sw a b']
FIxing the stuff
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
The updated skeleton is: ['ab', 'bc', 'cd', 'bc', 'ab', 'ab', 'ab', 'bc', 'cd', 'de', 'ef', 'de', 'cd', 'bc', 'ab', 'ab', 'bc', 'ab', 'ab', 'bc', 'cd', 'de', 'cd', 'bc', 'ab'] , its length is: 25
[('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 12), ('b', 16)]
The most used quantum gubits are [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 12), ('b', 16)]
tempDictionary {('q1', 0): ('q1', 0), ('q1', 1): ('q1', 1), ('q1', 2): ('q1', 2), ('q1', 3): ('q1', 3), ('q1', 4): ('q1', 4), ('q1', 5): ('q1', 5)}
items are dict_items([(('q1', 0), ('q1', 0)), (('q1', 1), ('q1', 1)), (('q1', 2), ('q1', 2)), (('q1', 3), ('q1', 3)), (('q1', 4), ('q1', 4)), (('q1', 5), ('q1', 5))])
IBMLAYOUT
{('q1', 0): ('q1', 0), ('q1', 1): ('q1', 1), ('q1', 2): ('q1', 2), ('q1', 3): ('q1', 3), ('q1', 4): ('q1', 4), ('q1', 5): ('q1', 5)}
Length of IBM compiled circuit with fixes is: 2832
{'110101': 300}
Recalculated weights are: {'ab': 9, 'bc': 7, 'cd': 5, 'de': 3, 'ef': 1}
[('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 12), ('b', 16)]
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 12), ('b', 16)]
wiggle wiggle
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 12), ('b', 16)]
SELFLAYOUTOFQUBIT ('b', 16)
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 12)]
Placing together b c
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8), ('a', 9)]
Placing together c a
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8)]
Placing together a d
Self.qubitconnectionscount= [('f', 1), ('e', 4)]
Placing together d e
Self.qubitconnectionscount= [('f', 1)]
Placing together e f
Final layout is {'b': 'm', 'c': 'l', 'a': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Current layout of ctg is: {'b': 'm', 'c': 'l', 'a': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
tempDictionary {('q2', 1): ('q2', 12), ('q2', 2): ('q2', 11), ('q2', 0): ('q2', 2), ('q2', 3): ('q2', 13), ('q2', 4): ('q2', 1), ('q2', 5): ('q2', 0)}
items are dict_items([(('q2', 1), ('q2', 12)), (('q2', 2), ('q2', 11)), (('q2', 0), ('q2', 2)), (('q2', 3), ('q2', 13)), (('q2', 4), ('q2', 1)), (('q2', 5), ('q2', 0))])
IBMLAYOUT
{('q2', 1): ('q2', 12), ('q2', 2): ('q2', 11), ('q2', 0): ('q2', 2), ('q2', 3): ('q2', 13), ('q2', 4): ('q2', 1), ('q2', 5): ('q2', 0)}
['t2 d a\n', 't2 b a\n', 't2 f a\n', 't1 c\n', 't2 c a\n', 't1 e\n', 't2 e a\n']
Self skeleton is ['ad', 'ab', 'af', 'ac', 'ae']
Missing connections are [['a', 'd'], ['a', 'f'], ['a', 'c']]
Paths to a d
SELF POSSIBLE PATH IS [['c', 'b', 'n'], ['c', 'd', 'l', 'm', 'n'], ['c', 'd', 'e', 'f', 'j', 'k', 'l', 'm', 'n'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l', 'm', 'n'], ['c', 'd', 'e', 'k', 'l', 'm', 'n'], ['c', 'm', 'n']]
ASSIGN: ['c', 'b', 'n']
Smallist is [myindex] is: ['c', 'b', 'n']  its length is 3
ASSIGN: ['c', 'm', 'n']
Smallist is [myindex] is: ['c', 'm', 'n']  its length is 3
['d', 'a'] ['a', 'd']
replaceTo ['c', 'm', 'n']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 d b
Paths to a f
SELF POSSIBLE PATH IS [['c', 'b', 'a'], ['c', 'd', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'f', 'j', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'm', 'n', 'b', 'a']]
ASSIGN: ['c', 'b', 'a']
Smallist is [myindex] is: ['c', 'b', 'a']  its length is 3
['d', 'b'] ['a', 'f']
['b', 'a'] ['a', 'f']
['f', 'a'] ['a', 'f']
replaceTo ['c', 'b', 'a']
Thing to replace ['a', 'e']
sw a e
CNOT REPLACEMENT IS: t2 f e
Paths to a c
SELF POSSIBLE PATH IS [['c', 'b', 'n', 'm', 'l'], ['c', 'd', 'l'], ['c', 'd', 'e', 'f', 'j', 'k', 'l'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l'], ['c', 'd', 'e', 'k', 'l'], ['c', 'm', 'l']]
ASSIGN: ['c', 'b', 'n', 'm', 'l']
Smallist is [myindex] is: ['c', 'b', 'n', 'm', 'l']  its length is 5
GOTCHA: ['c', 'd', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
ASSIGN: ['c', 'm', 'l']
Smallist is [myindex] is: ['c', 'm', 'l']  its length is 3
['d', 'b'] ['a', 'c']
['b', 'a'] ['a', 'c']
['f', 'e'] ['a', 'c']
['c', 'a'] ['a', 'c']
replaceTo ['c', 'm', 'l']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 c b
Lines are: ['sw a b', 't2 d b', 'sw a b', 't2 b a\n', 'sw a e', 't2 f e', 'sw a e', 't1 c\n', 'sw a b', 't2 c b', 'sw a b', 't1 e\n', 't2 e a\n']
FIxing the stuff
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
The updated skeleton is: ['ab', 'bd', 'ab', 'ab', 'ab', 'bc', 'cd', 'de', 'ef', 'ab', 'bc', 'cd', 'de', 'ab', 'bc', 'ab', 'ae'] , its length is: 17
[('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
The most used quantum gubits are [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
tempDictionary {('q3', 1): ('q3', 12), ('q3', 2): ('q3', 11), ('q3', 0): ('q3', 2), ('q3', 3): ('q3', 13), ('q3', 4): ('q3', 1), ('q3', 5): ('q3', 0)}
items are dict_items([(('q3', 1), ('q3', 12)), (('q3', 2), ('q3', 11)), (('q3', 0), ('q3', 2)), (('q3', 3), ('q3', 13)), (('q3', 4), ('q3', 1)), (('q3', 5), ('q3', 0))])
IBMLAYOUT
{('q3', 1): ('q3', 12), ('q3', 2): ('q3', 11), ('q3', 0): ('q3', 2), ('q3', 3): ('q3', 13), ('q3', 4): ('q3', 1), ('q3', 5): ('q3', 0)}

C:\Users\krylo\Anaconda3\lib\site-packages\marshmallow\schema.py:364: ChangedInMarshmallow3Warning: strict=False is not recommended. In marshmallow 3.0, schemas will always be strict. See https://marshmallow.readthedocs.io/en/latest/upgrading.html#schemas-are-always-strict
  ChangedInMarshmallow3Warning

Length of IBM compiled circuit with fixes is: 3321
{'111100': 300}
Recalculated weights are: {'ab': 7, 'bd': 1, 'bc': 3, 'cd': 2, 'de': 2, 'ef': 1, 'ae': 1}
[('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
wiggle wiggle
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
SELFLAYOUTOFQUBIT ('b', 11)
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8)]
Placing together b a
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5), ('c', 5)]
Placing together a c
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5)]
Placing together c d
Self.qubitconnectionscount= [('f', 1), ('e', 4)]
Placing together d e
Self.qubitconnectionscount= [('f', 1)]
Placing together e f
Final layout is {'b': 'm', 'a': 'l', 'c': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Current layout of ctg is: {'b': 'm', 'a': 'l', 'c': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
tempDictionary {('q4', 1): ('q4', 12), ('q4', 0): ('q4', 11), ('q4', 2): ('q4', 2), ('q4', 3): ('q4', 13), ('q4', 4): ('q4', 1), ('q4', 5): ('q4', 0)}
items are dict_items([(('q4', 1), ('q4', 12)), (('q4', 0), ('q4', 11)), (('q4', 2), ('q4', 2)), (('q4', 3), ('q4', 13)), (('q4', 4), ('q4', 1)), (('q4', 5), ('q4', 0))])
IBMLAYOUT
{('q4', 1): ('q4', 12), ('q4', 0): ('q4', 11), ('q4', 2): ('q4', 2), ('q4', 3): ('q4', 13), ('q4', 4): ('q4', 1), ('q4', 5): ('q4', 0)}
['t2 d a\n', 't2 b a\n', 't2 f a\n', 't1 c\n', 't2 c a\n', 't1 e\n', 't2 e a\n']
Self skeleton is ['ad', 'ab', 'af', 'ac', 'ae']
Missing connections are [['a', 'd'], ['a', 'f'], ['a', 'c'], ['a', 'e']]
Paths to a d
SELF POSSIBLE PATH IS [['l', 'm', 'c', 'b', 'n'], ['l', 'm', 'n'], ['l', 'd', 'c', 'b', 'n'], ['l', 'd', 'c', 'm', 'n'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'b', 'n'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'm', 'n'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'b', 'n'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'm', 'n'], ['l', 'k', 'e', 'd', 'c', 'b', 'n'], ['l', 'k', 'e', 'd', 'c', 'm', 'n']]
ASSIGN: ['l', 'm', 'c', 'b', 'n']
Smallist is [myindex] is: ['l', 'm', 'c', 'b', 'n']  its length is 5
ASSIGN: ['l', 'm', 'n']
Smallist is [myindex] is: ['l', 'm', 'n']  its length is 3
['d', 'a'] ['a', 'd']
replaceTo ['l', 'm', 'n']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 d b
Paths to a f
SELF POSSIBLE PATH IS [['l', 'm', 'c', 'b', 'a'], ['l', 'm', 'n', 'b', 'a'], ['l', 'd', 'c', 'b', 'a'], ['l', 'd', 'c', 'm', 'n', 'b', 'a'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'b', 'a'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'm', 'n', 'b', 'a'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'b', 'a'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'm', 'n', 'b', 'a'], ['l', 'k', 'e', 'd', 'c', 'b', 'a'], ['l', 'k', 'e', 'd', 'c', 'm', 'n', 'b', 'a']]
ASSIGN: ['l', 'm', 'c', 'b', 'a']
Smallist is [myindex] is: ['l', 'm', 'c', 'b', 'a']  its length is 5
ASSIGN: ['l', 'm', 'n', 'b', 'a']
Smallist is [myindex] is: ['l', 'm', 'n', 'b', 'a']  its length is 5
GOTCHA: ['l', 'd', 'c', 'b', 'a']
['d', 'b'] ['a', 'f']
['b', 'a'] ['a', 'f']
['f', 'a'] ['a', 'f']
replaceTo ['l', 'm', 'n', 'b', 'a']
Thing to replace ['a', 'e']
sw a b
sw b d
sw d e
CNOT REPLACEMENT IS: t2 f e
Paths to a c
SELF POSSIBLE PATH IS [['l', 'm', 'c'], ['l', 'm', 'n', 'b', 'c'], ['l', 'd', 'c'], ['l', 'k', 'j', 'f', 'e', 'd', 'c'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c'], ['l', 'k', 'e', 'd', 'c']]
ASSIGN: ['l', 'm', 'c']
Smallist is [myindex] is: ['l', 'm', 'c']  its length is 3
GOTCHA: ['l', 'd', 'c']
['d', 'b'] ['a', 'c']
['b', 'a'] ['a', 'c']
['f', 'e'] ['a', 'c']
['c', 'a'] ['a', 'c']
replaceTo ['l', 'm', 'c']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 c b
Paths to a e
SELF POSSIBLE PATH IS [['l', 'm', 'c', 'b'], ['l', 'm', 'n', 'b'], ['l', 'd', 'c', 'b'], ['l', 'd', 'c', 'm', 'n', 'b'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'b'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'm', 'n', 'b'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'b'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'm', 'n', 'b'], ['l', 'k', 'e', 'd', 'c', 'b'], ['l', 'k', 'e', 'd', 'c', 'm', 'n', 'b']]
ASSIGN: ['l', 'm', 'c', 'b']
Smallist is [myindex] is: ['l', 'm', 'c', 'b']  its length is 4
ASSIGN: ['l', 'm', 'n', 'b']
Smallist is [myindex] is: ['l', 'm', 'n', 'b']  its length is 4
GOTCHA: ['l', 'd', 'c', 'b']
['d', 'b'] ['a', 'e']
['b', 'a'] ['a', 'e']
['f', 'e'] ['a', 'e']
['c', 'b'] ['a', 'e']
['e', 'a'] ['a', 'e']
replaceTo ['l', 'm', 'n', 'b']
Thing to replace ['a', 'd']
sw a b
sw b d
CNOT REPLACEMENT IS: t2 e d
Lines are: ['sw a b', 't2 d b', 'sw a b', 't2 b a\n', 'sw a b', 'sw b d', 'sw d e', 't2 f e', 'sw d e', 'sw b d', 'sw a b', 't1 c\n', 'sw a b', 't2 c b', 'sw a b', 't1 e\n', 'sw a b', 'sw b d', 't2 e d', 'sw b d', 'sw a b']
FIxing the stuff
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
The updated skeleton is: ['ab', 'bd', 'ab', 'ab', 'ab', 'bc', 'cd', 'de', 'ef', 'de', 'bc', 'cd', 'ab', 'ab', 'bc', 'ab', 'ab', 'bc', 'cd', 'de', 'bc', 'cd', 'ab'] , its length is: 23
[('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
The most used quantum gubits are [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
tempDictionary {('q5', 1): ('q5', 12), ('q5', 0): ('q5', 11), ('q5', 2): ('q5', 2), ('q5', 3): ('q5', 13), ('q5', 4): ('q5', 1), ('q5', 5): ('q5', 0)}
items are dict_items([(('q5', 1), ('q5', 12)), (('q5', 0), ('q5', 11)), (('q5', 2), ('q5', 2)), (('q5', 3), ('q5', 13)), (('q5', 4), ('q5', 1)), (('q5', 5), ('q5', 0))])
IBMLAYOUT
{('q5', 1): ('q5', 12), ('q5', 0): ('q5', 11), ('q5', 2): ('q5', 2), ('q5', 3): ('q5', 13), ('q5', 4): ('q5', 1), ('q5', 5): ('q5', 0)}
Length of IBM compiled circuit with fixes is: 2757
{'110100': 300}
Recalculated weights are: {'ab': 9, 'bd': 1, 'bc': 5, 'cd': 4, 'de': 3, 'ef': 1}
[('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
wiggle wiggle
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
SELFLAYOUTOFQUBIT ('b', 15)
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9)]
Placing together b c
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8), ('a', 9)]
Placing together c a
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8)]
Placing together a d
Self.qubitconnectionscount= [('f', 1), ('e', 4)]
Placing together d e
Self.qubitconnectionscount= [('f', 1)]
Placing together e f
Final layout is {'b': 'm', 'c': 'l', 'a': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Current layout of ctg is: {'b': 'm', 'c': 'l', 'a': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
tempDictionary {('q6', 1): ('q6', 12), ('q6', 2): ('q6', 11), ('q6', 0): ('q6', 2), ('q6', 3): ('q6', 13), ('q6', 4): ('q6', 1), ('q6', 5): ('q6', 0)}
items are dict_items([(('q6', 1), ('q6', 12)), (('q6', 2), ('q6', 11)), (('q6', 0), ('q6', 2)), (('q6', 3), ('q6', 13)), (('q6', 4), ('q6', 1)), (('q6', 5), ('q6', 0))])
IBMLAYOUT
{('q6', 1): ('q6', 12), ('q6', 2): ('q6', 11), ('q6', 0): ('q6', 2), ('q6', 3): ('q6', 13), ('q6', 4): ('q6', 1), ('q6', 5): ('q6', 0)}
['t2 d a\n', 't2 b a\n', 't2 f a\n', 't1 c\n', 't2 c a\n', 't1 e\n', 't2 e a\n']
Self skeleton is ['ad', 'ab', 'af', 'ac', 'ae']
Missing connections are [['a', 'd'], ['a', 'f'], ['a', 'c']]
Paths to a d
SELF POSSIBLE PATH IS [['c', 'b', 'n'], ['c', 'd', 'l', 'm', 'n'], ['c', 'd', 'e', 'f', 'j', 'k', 'l', 'm', 'n'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l', 'm', 'n'], ['c', 'd', 'e', 'k', 'l', 'm', 'n'], ['c', 'm', 'n']]
ASSIGN: ['c', 'b', 'n']
Smallist is [myindex] is: ['c', 'b', 'n']  its length is 3
ASSIGN: ['c', 'm', 'n']
Smallist is [myindex] is: ['c', 'm', 'n']  its length is 3
['d', 'a'] ['a', 'd']
replaceTo ['c', 'm', 'n']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 d b
Paths to a f
SELF POSSIBLE PATH IS [['c', 'b', 'a'], ['c', 'd', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'f', 'j', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'm', 'n', 'b', 'a']]
ASSIGN: ['c', 'b', 'a']
Smallist is [myindex] is: ['c', 'b', 'a']  its length is 3
['d', 'b'] ['a', 'f']
['b', 'a'] ['a', 'f']
['f', 'a'] ['a', 'f']
replaceTo ['c', 'b', 'a']
Thing to replace ['a', 'e']
sw a e
CNOT REPLACEMENT IS: t2 f e
Paths to a c
SELF POSSIBLE PATH IS [['c', 'b', 'n', 'm', 'l'], ['c', 'd', 'l'], ['c', 'd', 'e', 'f', 'j', 'k', 'l'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l'], ['c', 'd', 'e', 'k', 'l'], ['c', 'm', 'l']]
ASSIGN: ['c', 'b', 'n', 'm', 'l']
Smallist is [myindex] is: ['c', 'b', 'n', 'm', 'l']  its length is 5
GOTCHA: ['c', 'd', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
ASSIGN: ['c', 'm', 'l']
Smallist is [myindex] is: ['c', 'm', 'l']  its length is 3
['d', 'b'] ['a', 'c']
['b', 'a'] ['a', 'c']
['f', 'e'] ['a', 'c']
['c', 'a'] ['a', 'c']
replaceTo ['c', 'm', 'l']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 c b
Lines are: ['sw a b', 't2 d b', 'sw a b', 't2 b a\n', 'sw a e', 't2 f e', 'sw a e', 't1 c\n', 'sw a b', 't2 c b', 'sw a b', 't1 e\n', 't2 e a\n']
FIxing the stuff
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
The updated skeleton is: ['ab', 'bd', 'ab', 'ab', 'ab', 'bc', 'cd', 'de', 'ef', 'ab', 'bc', 'cd', 'de', 'ab', 'bc', 'ab', 'ae'] , its length is: 17
[('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
The most used quantum gubits are [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
tempDictionary {('q7', 1): ('q7', 12), ('q7', 2): ('q7', 11), ('q7', 0): ('q7', 2), ('q7', 3): ('q7', 13), ('q7', 4): ('q7', 1), ('q7', 5): ('q7', 0)}
items are dict_items([(('q7', 1), ('q7', 12)), (('q7', 2), ('q7', 11)), (('q7', 0), ('q7', 2)), (('q7', 3), ('q7', 13)), (('q7', 4), ('q7', 1)), (('q7', 5), ('q7', 0))])
IBMLAYOUT
{('q7', 1): ('q7', 12), ('q7', 2): ('q7', 11), ('q7', 0): ('q7', 2), ('q7', 3): ('q7', 13), ('q7', 4): ('q7', 1), ('q7', 5): ('q7', 0)}

Length of IBM compiled circuit with fixes is: 3371
{'111100': 300}
Recalculated weights are: {'ab': 7, 'bd': 1, 'bc': 3, 'cd': 2, 'de': 2, 'ef': 1, 'ae': 1}
[('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
wiggle wiggle
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
SELFLAYOUTOFQUBIT ('b', 11)
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8)]
Placing together b a
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5), ('c', 5)]
Placing together a c
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5)]
Placing together c d
Self.qubitconnectionscount= [('f', 1), ('e', 4)]
Placing together d e
Self.qubitconnectionscount= [('f', 1)]
Placing together e f
Final layout is {'b': 'm', 'a': 'l', 'c': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Current layout of ctg is: {'b': 'm', 'a': 'l', 'c': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
tempDictionary {('q8', 1): ('q8', 12), ('q8', 0): ('q8', 11), ('q8', 2): ('q8', 2), ('q8', 3): ('q8', 13), ('q8', 4): ('q8', 1), ('q8', 5): ('q8', 0)}
items are dict_items([(('q8', 1), ('q8', 12)), (('q8', 0), ('q8', 11)), (('q8', 2), ('q8', 2)), (('q8', 3), ('q8', 13)), (('q8', 4), ('q8', 1)), (('q8', 5), ('q8', 0))])
IBMLAYOUT
{('q8', 1): ('q8', 12), ('q8', 0): ('q8', 11), ('q8', 2): ('q8', 2), ('q8', 3): ('q8', 13), ('q8', 4): ('q8', 1), ('q8', 5): ('q8', 0)}
['t2 d a\n', 't2 b a\n', 't2 f a\n', 't1 c\n', 't2 c a\n', 't1 e\n', 't2 e a\n']
Self skeleton is ['ad', 'ab', 'af', 'ac', 'ae']
Missing connections are [['a', 'd'], ['a', 'f'], ['a', 'c'], ['a', 'e']]
Paths to a d
SELF POSSIBLE PATH IS [['l', 'm', 'c', 'b', 'n'], ['l', 'm', 'n'], ['l', 'd', 'c', 'b', 'n'], ['l', 'd', 'c', 'm', 'n'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'b', 'n'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'm', 'n'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'b', 'n'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'm', 'n'], ['l', 'k', 'e', 'd', 'c', 'b', 'n'], ['l', 'k', 'e', 'd', 'c', 'm', 'n']]
ASSIGN: ['l', 'm', 'c', 'b', 'n']
Smallist is [myindex] is: ['l', 'm', 'c', 'b', 'n']  its length is 5
ASSIGN: ['l', 'm', 'n']
Smallist is [myindex] is: ['l', 'm', 'n']  its length is 3
['d', 'a'] ['a', 'd']
replaceTo ['l', 'm', 'n']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 d b
Paths to a f
SELF POSSIBLE PATH IS [['l', 'm', 'c', 'b', 'a'], ['l', 'm', 'n', 'b', 'a'], ['l', 'd', 'c', 'b', 'a'], ['l', 'd', 'c', 'm', 'n', 'b', 'a'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'b', 'a'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'm', 'n', 'b', 'a'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'b', 'a'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'm', 'n', 'b', 'a'], ['l', 'k', 'e', 'd', 'c', 'b', 'a'], ['l', 'k', 'e', 'd', 'c', 'm', 'n', 'b', 'a']]
ASSIGN: ['l', 'm', 'c', 'b', 'a']
Smallist is [myindex] is: ['l', 'm', 'c', 'b', 'a']  its length is 5
ASSIGN: ['l', 'm', 'n', 'b', 'a']
Smallist is [myindex] is: ['l', 'm', 'n', 'b', 'a']  its length is 5
GOTCHA: ['l', 'd', 'c', 'b', 'a']
['d', 'b'] ['a', 'f']
['b', 'a'] ['a', 'f']
['f', 'a'] ['a', 'f']
replaceTo ['l', 'm', 'n', 'b', 'a']
Thing to replace ['a', 'e']
sw a b
sw b d
sw d e
CNOT REPLACEMENT IS: t2 f e
Paths to a c
SELF POSSIBLE PATH IS [['l', 'm', 'c'], ['l', 'm', 'n', 'b', 'c'], ['l', 'd', 'c'], ['l', 'k', 'j', 'f', 'e', 'd', 'c'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c'], ['l', 'k', 'e', 'd', 'c']]
ASSIGN: ['l', 'm', 'c']
Smallist is [myindex] is: ['l', 'm', 'c']  its length is 3
GOTCHA: ['l', 'd', 'c']
['d', 'b'] ['a', 'c']
['b', 'a'] ['a', 'c']
['f', 'e'] ['a', 'c']
['c', 'a'] ['a', 'c']
replaceTo ['l', 'm', 'c']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 c b
Paths to a e
SELF POSSIBLE PATH IS [['l', 'm', 'c', 'b'], ['l', 'm', 'n', 'b'], ['l', 'd', 'c', 'b'], ['l', 'd', 'c', 'm', 'n', 'b'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'b'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'm', 'n', 'b'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'b'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'm', 'n', 'b'], ['l', 'k', 'e', 'd', 'c', 'b'], ['l', 'k', 'e', 'd', 'c', 'm', 'n', 'b']]
ASSIGN: ['l', 'm', 'c', 'b']
Smallist is [myindex] is: ['l', 'm', 'c', 'b']  its length is 4
ASSIGN: ['l', 'm', 'n', 'b']
Smallist is [myindex] is: ['l', 'm', 'n', 'b']  its length is 4
GOTCHA: ['l', 'd', 'c', 'b']
['d', 'b'] ['a', 'e']
['b', 'a'] ['a', 'e']
['f', 'e'] ['a', 'e']
['c', 'b'] ['a', 'e']
['e', 'a'] ['a', 'e']
replaceTo ['l', 'm', 'n', 'b']
Thing to replace ['a', 'd']
sw a b
sw b d
CNOT REPLACEMENT IS: t2 e d
Lines are: ['sw a b', 't2 d b', 'sw a b', 't2 b a\n', 'sw a b', 'sw b d', 'sw d e', 't2 f e', 'sw d e', 'sw b d', 'sw a b', 't1 c\n', 'sw a b', 't2 c b', 'sw a b', 't1 e\n', 'sw a b', 'sw b d', 't2 e d', 'sw b d', 'sw a b']
FIxing the stuff
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
The updated skeleton is: ['ab', 'bd', 'ab', 'ab', 'ab', 'bc', 'cd', 'de', 'ef', 'de', 'bc', 'cd', 'ab', 'ab', 'bc', 'ab', 'ab', 'bc', 'cd', 'de', 'bc', 'cd', 'ab'] , its length is: 23
[('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
The most used quantum gubits are [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
tempDictionary {('q9', 1): ('q9', 12), ('q9', 0): ('q9', 11), ('q9', 2): ('q9', 2), ('q9', 3): ('q9', 13), ('q9', 4): ('q9', 1), ('q9', 5): ('q9', 0)}
items are dict_items([(('q9', 1), ('q9', 12)), (('q9', 0), ('q9', 11)), (('q9', 2), ('q9', 2)), (('q9', 3), ('q9', 13)), (('q9', 4), ('q9', 1)), (('q9', 5), ('q9', 0))])
IBMLAYOUT
{('q9', 1): ('q9', 12), ('q9', 0): ('q9', 11), ('q9', 2): ('q9', 2), ('q9', 3): ('q9', 13), ('q9', 4): ('q9', 1), ('q9', 5): ('q9', 0)}
Length of IBM compiled circuit with fixes is: 2712
{'110100': 300}
Recalculated weights are: {'ab': 9, 'bd': 1, 'bc': 5, 'cd': 4, 'de': 3, 'ef': 1}
[('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
wiggle wiggle
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
SELFLAYOUTOFQUBIT ('b', 15)
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9)]
Placing together b c
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8), ('a', 9)]
Placing together c a
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8)]
Placing together a d
Self.qubitconnectionscount= [('f', 1), ('e', 4)]
Placing together d e
Self.qubitconnectionscount= [('f', 1)]
Placing together e f
Final layout is {'b': 'm', 'c': 'l', 'a': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Current layout of ctg is: {'b': 'm', 'c': 'l', 'a': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
tempDictionary {('q10', 1): ('q10', 12), ('q10', 2): ('q10', 11), ('q10', 0): ('q10', 2), ('q10', 3): ('q10', 13), ('q10', 4): ('q10', 1), ('q10', 5): ('q10', 0)}
items are dict_items([(('q10', 1), ('q10', 12)), (('q10', 2), ('q10', 11)), (('q10', 0), ('q10', 2)), (('q10', 3), ('q10', 13)), (('q10', 4), ('q10', 1)), (('q10', 5), ('q10', 0))])
IBMLAYOUT
{('q10', 1): ('q10', 12), ('q10', 2): ('q10', 11), ('q10', 0): ('q10', 2), ('q10', 3): ('q10', 13), ('q10', 4): ('q10', 1), ('q10', 5): ('q10', 0)}
['t2 d a\n', 't2 b a\n', 't2 f a\n', 't1 c\n', 't2 c a\n', 't1 e\n', 't2 e a\n']
Self skeleton is ['ad', 'ab', 'af', 'ac', 'ae']
Missing connections are [['a', 'd'], ['a', 'f'], ['a', 'c']]
Paths to a d
SELF POSSIBLE PATH IS [['c', 'b', 'n'], ['c', 'd', 'l', 'm', 'n'], ['c', 'd', 'e', 'f', 'j', 'k', 'l', 'm', 'n'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l', 'm', 'n'], ['c', 'd', 'e', 'k', 'l', 'm', 'n'], ['c', 'm', 'n']]
ASSIGN: ['c', 'b', 'n']
Smallist is [myindex] is: ['c', 'b', 'n']  its length is 3
ASSIGN: ['c', 'm', 'n']
Smallist is [myindex] is: ['c', 'm', 'n']  its length is 3
['d', 'a'] ['a', 'd']
replaceTo ['c', 'm', 'n']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 d b
Paths to a f
SELF POSSIBLE PATH IS [['c', 'b', 'a'], ['c', 'd', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'f', 'j', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'm', 'n', 'b', 'a']]
ASSIGN: ['c', 'b', 'a']
Smallist is [myindex] is: ['c', 'b', 'a']  its length is 3
['d', 'b'] ['a', 'f']
['b', 'a'] ['a', 'f']
['f', 'a'] ['a', 'f']
replaceTo ['c', 'b', 'a']
Thing to replace ['a', 'e']
sw a e
CNOT REPLACEMENT IS: t2 f e
Paths to a c
SELF POSSIBLE PATH IS [['c', 'b', 'n', 'm', 'l'], ['c', 'd', 'l'], ['c', 'd', 'e', 'f', 'j', 'k', 'l'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l'], ['c', 'd', 'e', 'k', 'l'], ['c', 'm', 'l']]
ASSIGN: ['c', 'b', 'n', 'm', 'l']
Smallist is [myindex] is: ['c', 'b', 'n', 'm', 'l']  its length is 5
GOTCHA: ['c', 'd', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
ASSIGN: ['c', 'm', 'l']
Smallist is [myindex] is: ['c', 'm', 'l']  its length is 3
['d', 'b'] ['a', 'c']
['b', 'a'] ['a', 'c']
['f', 'e'] ['a', 'c']
['c', 'a'] ['a', 'c']
replaceTo ['c', 'm', 'l']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 c b
Lines are: ['sw a b', 't2 d b', 'sw a b', 't2 b a\n', 'sw a e', 't2 f e', 'sw a e', 't1 c\n', 'sw a b', 't2 c b', 'sw a b', 't1 e\n', 't2 e a\n']
FIxing the stuff
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
The updated skeleton is: ['ab', 'bd', 'ab', 'ab', 'ab', 'bc', 'cd', 'de', 'ef', 'ab', 'bc', 'cd', 'de', 'ab', 'bc', 'ab', 'ae'] , its length is: 17
[('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
The most used quantum gubits are [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
tempDictionary {('q11', 1): ('q11', 12), ('q11', 2): ('q11', 11), ('q11', 0): ('q11', 2), ('q11', 3): ('q11', 13), ('q11', 4): ('q11', 1), ('q11', 5): ('q11', 0)}
items are dict_items([(('q11', 1), ('q11', 12)), (('q11', 2), ('q11', 11)), (('q11', 0), ('q11', 2)), (('q11', 3), ('q11', 13)), (('q11', 4), ('q11', 1)), (('q11', 5), ('q11', 0))])
IBMLAYOUT
{('q11', 1): ('q11', 12), ('q11', 2): ('q11', 11), ('q11', 0): ('q11', 2), ('q11', 3): ('q11', 13), ('q11', 4): ('q11', 1), ('q11', 5): ('q11', 0)}

Length of IBM compiled circuit with fixes is: 3259
{'111100': 300}
Recalculated weights are: {'ab': 7, 'bd': 1, 'bc': 3, 'cd': 2, 'de': 2, 'ef': 1, 'ae': 1}
[('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
wiggle wiggle
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
SELFLAYOUTOFQUBIT ('b', 11)
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8)]
Placing together b a
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5), ('c', 5)]
Placing together a c
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5)]
Placing together c d
Self.qubitconnectionscount= [('f', 1), ('e', 4)]
Placing together d e
Self.qubitconnectionscount= [('f', 1)]
Placing together e f
Final layout is {'b': 'm', 'a': 'l', 'c': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Current layout of ctg is: {'b': 'm', 'a': 'l', 'c': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
tempDictionary {('q12', 1): ('q12', 12), ('q12', 0): ('q12', 11), ('q12', 2): ('q12', 2), ('q12', 3): ('q12', 13), ('q12', 4): ('q12', 1), ('q12', 5): ('q12', 0)}
items are dict_items([(('q12', 1), ('q12', 12)), (('q12', 0), ('q12', 11)), (('q12', 2), ('q12', 2)), (('q12', 3), ('q12', 13)), (('q12', 4), ('q12', 1)), (('q12', 5), ('q12', 0))])
IBMLAYOUT
{('q12', 1): ('q12', 12), ('q12', 0): ('q12', 11), ('q12', 2): ('q12', 2), ('q12', 3): ('q12', 13), ('q12', 4): ('q12', 1), ('q12', 5): ('q12', 0)}
['t2 d a\n', 't2 b a\n', 't2 f a\n', 't1 c\n', 't2 c a\n', 't1 e\n', 't2 e a\n']
Self skeleton is ['ad', 'ab', 'af', 'ac', 'ae']
Missing connections are [['a', 'd'], ['a', 'f'], ['a', 'c'], ['a', 'e']]
Paths to a d
SELF POSSIBLE PATH IS [['l', 'm', 'c', 'b', 'n'], ['l', 'm', 'n'], ['l', 'd', 'c', 'b', 'n'], ['l', 'd', 'c', 'm', 'n'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'b', 'n'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'm', 'n'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'b', 'n'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'm', 'n'], ['l', 'k', 'e', 'd', 'c', 'b', 'n'], ['l', 'k', 'e', 'd', 'c', 'm', 'n']]
ASSIGN: ['l', 'm', 'c', 'b', 'n']
Smallist is [myindex] is: ['l', 'm', 'c', 'b', 'n']  its length is 5
ASSIGN: ['l', 'm', 'n']
Smallist is [myindex] is: ['l', 'm', 'n']  its length is 3
['d', 'a'] ['a', 'd']
replaceTo ['l', 'm', 'n']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 d b
Paths to a f
SELF POSSIBLE PATH IS [['l', 'm', 'c', 'b', 'a'], ['l', 'm', 'n', 'b', 'a'], ['l', 'd', 'c', 'b', 'a'], ['l', 'd', 'c', 'm', 'n', 'b', 'a'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'b', 'a'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'm', 'n', 'b', 'a'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'b', 'a'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'm', 'n', 'b', 'a'], ['l', 'k', 'e', 'd', 'c', 'b', 'a'], ['l', 'k', 'e', 'd', 'c', 'm', 'n', 'b', 'a']]
ASSIGN: ['l', 'm', 'c', 'b', 'a']
Smallist is [myindex] is: ['l', 'm', 'c', 'b', 'a']  its length is 5
ASSIGN: ['l', 'm', 'n', 'b', 'a']
Smallist is [myindex] is: ['l', 'm', 'n', 'b', 'a']  its length is 5
GOTCHA: ['l', 'd', 'c', 'b', 'a']
['d', 'b'] ['a', 'f']
['b', 'a'] ['a', 'f']
['f', 'a'] ['a', 'f']
replaceTo ['l', 'm', 'n', 'b', 'a']
Thing to replace ['a', 'e']
sw a b
sw b d
sw d e
CNOT REPLACEMENT IS: t2 f e
Paths to a c
SELF POSSIBLE PATH IS [['l', 'm', 'c'], ['l', 'm', 'n', 'b', 'c'], ['l', 'd', 'c'], ['l', 'k', 'j', 'f', 'e', 'd', 'c'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c'], ['l', 'k', 'e', 'd', 'c']]
ASSIGN: ['l', 'm', 'c']
Smallist is [myindex] is: ['l', 'm', 'c']  its length is 3
GOTCHA: ['l', 'd', 'c']
['d', 'b'] ['a', 'c']
['b', 'a'] ['a', 'c']
['f', 'e'] ['a', 'c']
['c', 'a'] ['a', 'c']
replaceTo ['l', 'm', 'c']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 c b
Paths to a e
SELF POSSIBLE PATH IS [['l', 'm', 'c', 'b'], ['l', 'm', 'n', 'b'], ['l', 'd', 'c', 'b'], ['l', 'd', 'c', 'm', 'n', 'b'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'b'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'm', 'n', 'b'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'b'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'm', 'n', 'b'], ['l', 'k', 'e', 'd', 'c', 'b'], ['l', 'k', 'e', 'd', 'c', 'm', 'n', 'b']]
ASSIGN: ['l', 'm', 'c', 'b']
Smallist is [myindex] is: ['l', 'm', 'c', 'b']  its length is 4
ASSIGN: ['l', 'm', 'n', 'b']
Smallist is [myindex] is: ['l', 'm', 'n', 'b']  its length is 4
GOTCHA: ['l', 'd', 'c', 'b']
['d', 'b'] ['a', 'e']
['b', 'a'] ['a', 'e']
['f', 'e'] ['a', 'e']
['c', 'b'] ['a', 'e']
['e', 'a'] ['a', 'e']
replaceTo ['l', 'm', 'n', 'b']
Thing to replace ['a', 'd']
sw a b
sw b d
CNOT REPLACEMENT IS: t2 e d
Lines are: ['sw a b', 't2 d b', 'sw a b', 't2 b a\n', 'sw a b', 'sw b d', 'sw d e', 't2 f e', 'sw d e', 'sw b d', 'sw a b', 't1 c\n', 'sw a b', 't2 c b', 'sw a b', 't1 e\n', 'sw a b', 'sw b d', 't2 e d', 'sw b d', 'sw a b']
FIxing the stuff
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
The updated skeleton is: ['ab', 'bd', 'ab', 'ab', 'ab', 'bc', 'cd', 'de', 'ef', 'de', 'bc', 'cd', 'ab', 'ab', 'bc', 'ab', 'ab', 'bc', 'cd', 'de', 'bc', 'cd', 'ab'] , its length is: 23
[('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
The most used quantum gubits are [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
tempDictionary {('q13', 1): ('q13', 12), ('q13', 0): ('q13', 11), ('q13', 2): ('q13', 2), ('q13', 3): ('q13', 13), ('q13', 4): ('q13', 1), ('q13', 5): ('q13', 0)}
items are dict_items([(('q13', 1), ('q13', 12)), (('q13', 0), ('q13', 11)), (('q13', 2), ('q13', 2)), (('q13', 3), ('q13', 13)), (('q13', 4), ('q13', 1)), (('q13', 5), ('q13', 0))])
IBMLAYOUT
{('q13', 1): ('q13', 12), ('q13', 0): ('q13', 11), ('q13', 2): ('q13', 2), ('q13', 3): ('q13', 13), ('q13', 4): ('q13', 1), ('q13', 5): ('q13', 0)}
Length of IBM compiled circuit with fixes is: 4228
{'110100': 300}
Recalculated weights are: {'ab': 9, 'bd': 1, 'bc': 5, 'cd': 4, 'de': 3, 'ef': 1}
[('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
wiggle wiggle
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
SELFLAYOUTOFQUBIT ('b', 15)
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9)]
Placing together b c
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8), ('a', 9)]
Placing together c a
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8)]
Placing together a d
Self.qubitconnectionscount= [('f', 1), ('e', 4)]
Placing together d e
Self.qubitconnectionscount= [('f', 1)]
Placing together e f
Final layout is {'b': 'm', 'c': 'l', 'a': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Current layout of ctg is: {'b': 'm', 'c': 'l', 'a': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
tempDictionary {('q14', 1): ('q14', 12), ('q14', 2): ('q14', 11), ('q14', 0): ('q14', 2), ('q14', 3): ('q14', 13), ('q14', 4): ('q14', 1), ('q14', 5): ('q14', 0)}
items are dict_items([(('q14', 1), ('q14', 12)), (('q14', 2), ('q14', 11)), (('q14', 0), ('q14', 2)), (('q14', 3), ('q14', 13)), (('q14', 4), ('q14', 1)), (('q14', 5), ('q14', 0))])
IBMLAYOUT
{('q14', 1): ('q14', 12), ('q14', 2): ('q14', 11), ('q14', 0): ('q14', 2), ('q14', 3): ('q14', 13), ('q14', 4): ('q14', 1), ('q14', 5): ('q14', 0)}
['t2 d a\n', 't2 b a\n', 't2 f a\n', 't1 c\n', 't2 c a\n', 't1 e\n', 't2 e a\n']
Self skeleton is ['ad', 'ab', 'af', 'ac', 'ae']
Missing connections are [['a', 'd'], ['a', 'f'], ['a', 'c']]
Paths to a d
SELF POSSIBLE PATH IS [['c', 'b', 'n'], ['c', 'd', 'l', 'm', 'n'], ['c', 'd', 'e', 'f', 'j', 'k', 'l', 'm', 'n'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l', 'm', 'n'], ['c', 'd', 'e', 'k', 'l', 'm', 'n'], ['c', 'm', 'n']]
ASSIGN: ['c', 'b', 'n']
Smallist is [myindex] is: ['c', 'b', 'n']  its length is 3
ASSIGN: ['c', 'm', 'n']
Smallist is [myindex] is: ['c', 'm', 'n']  its length is 3
['d', 'a'] ['a', 'd']
replaceTo ['c', 'm', 'n']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 d b
Paths to a f
SELF POSSIBLE PATH IS [['c', 'b', 'a'], ['c', 'd', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'f', 'j', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'm', 'n', 'b', 'a']]
ASSIGN: ['c', 'b', 'a']
Smallist is [myindex] is: ['c', 'b', 'a']  its length is 3
['d', 'b'] ['a', 'f']
['b', 'a'] ['a', 'f']
['f', 'a'] ['a', 'f']
replaceTo ['c', 'b', 'a']
Thing to replace ['a', 'e']
sw a e
CNOT REPLACEMENT IS: t2 f e
Paths to a c
SELF POSSIBLE PATH IS [['c', 'b', 'n', 'm', 'l'], ['c', 'd', 'l'], ['c', 'd', 'e', 'f', 'j', 'k', 'l'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l'], ['c', 'd', 'e', 'k', 'l'], ['c', 'm', 'l']]
ASSIGN: ['c', 'b', 'n', 'm', 'l']
Smallist is [myindex] is: ['c', 'b', 'n', 'm', 'l']  its length is 5
GOTCHA: ['c', 'd', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
ASSIGN: ['c', 'm', 'l']
Smallist is [myindex] is: ['c', 'm', 'l']  its length is 3
['d', 'b'] ['a', 'c']
['b', 'a'] ['a', 'c']
['f', 'e'] ['a', 'c']
['c', 'a'] ['a', 'c']
replaceTo ['c', 'm', 'l']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 c b
Lines are: ['sw a b', 't2 d b', 'sw a b', 't2 b a\n', 'sw a e', 't2 f e', 'sw a e', 't1 c\n', 'sw a b', 't2 c b', 'sw a b', 't1 e\n', 't2 e a\n']
FIxing the stuff
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
The updated skeleton is: ['ab', 'bd', 'ab', 'ab', 'ab', 'bc', 'cd', 'de', 'ef', 'ab', 'bc', 'cd', 'de', 'ab', 'bc', 'ab', 'ae'] , its length is: 17
[('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
The most used quantum gubits are [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
tempDictionary {('q15', 1): ('q15', 12), ('q15', 2): ('q15', 11), ('q15', 0): ('q15', 2), ('q15', 3): ('q15', 13), ('q15', 4): ('q15', 1), ('q15', 5): ('q15', 0)}
items are dict_items([(('q15', 1), ('q15', 12)), (('q15', 2), ('q15', 11)), (('q15', 0), ('q15', 2)), (('q15', 3), ('q15', 13)), (('q15', 4), ('q15', 1)), (('q15', 5), ('q15', 0))])
IBMLAYOUT
{('q15', 1): ('q15', 12), ('q15', 2): ('q15', 11), ('q15', 0): ('q15', 2), ('q15', 3): ('q15', 13), ('q15', 4): ('q15', 1), ('q15', 5): ('q15', 0)}

Length of IBM compiled circuit with fixes is: 3104
{'111100': 300}
Recalculated weights are: {'ab': 7, 'bd': 1, 'bc': 3, 'cd': 2, 'de': 2, 'ef': 1, 'ae': 1}
[('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
wiggle wiggle
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
SELFLAYOUTOFQUBIT ('b', 11)
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8)]
Placing together b a
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5), ('c', 5)]
Placing together a c
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5)]
Placing together c d
Self.qubitconnectionscount= [('f', 1), ('e', 4)]
Placing together d e
Self.qubitconnectionscount= [('f', 1)]
Placing together e f
Final layout is {'b': 'm', 'a': 'l', 'c': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Current layout of ctg is: {'b': 'm', 'a': 'l', 'c': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
tempDictionary {('q16', 1): ('q16', 12), ('q16', 0): ('q16', 11), ('q16', 2): ('q16', 2), ('q16', 3): ('q16', 13), ('q16', 4): ('q16', 1), ('q16', 5): ('q16', 0)}
items are dict_items([(('q16', 1), ('q16', 12)), (('q16', 0), ('q16', 11)), (('q16', 2), ('q16', 2)), (('q16', 3), ('q16', 13)), (('q16', 4), ('q16', 1)), (('q16', 5), ('q16', 0))])
IBMLAYOUT
{('q16', 1): ('q16', 12), ('q16', 0): ('q16', 11), ('q16', 2): ('q16', 2), ('q16', 3): ('q16', 13), ('q16', 4): ('q16', 1), ('q16', 5): ('q16', 0)}
['t2 d a\n', 't2 b a\n', 't2 f a\n', 't1 c\n', 't2 c a\n', 't1 e\n', 't2 e a\n']
Self skeleton is ['ad', 'ab', 'af', 'ac', 'ae']
Missing connections are [['a', 'd'], ['a', 'f'], ['a', 'c'], ['a', 'e']]
Paths to a d
SELF POSSIBLE PATH IS [['l', 'm', 'c', 'b', 'n'], ['l', 'm', 'n'], ['l', 'd', 'c', 'b', 'n'], ['l', 'd', 'c', 'm', 'n'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'b', 'n'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'm', 'n'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'b', 'n'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'm', 'n'], ['l', 'k', 'e', 'd', 'c', 'b', 'n'], ['l', 'k', 'e', 'd', 'c', 'm', 'n']]
ASSIGN: ['l', 'm', 'c', 'b', 'n']
Smallist is [myindex] is: ['l', 'm', 'c', 'b', 'n']  its length is 5
ASSIGN: ['l', 'm', 'n']
Smallist is [myindex] is: ['l', 'm', 'n']  its length is 3
['d', 'a'] ['a', 'd']
replaceTo ['l', 'm', 'n']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 d b
Paths to a f
SELF POSSIBLE PATH IS [['l', 'm', 'c', 'b', 'a'], ['l', 'm', 'n', 'b', 'a'], ['l', 'd', 'c', 'b', 'a'], ['l', 'd', 'c', 'm', 'n', 'b', 'a'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'b', 'a'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'm', 'n', 'b', 'a'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'b', 'a'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'm', 'n', 'b', 'a'], ['l', 'k', 'e', 'd', 'c', 'b', 'a'], ['l', 'k', 'e', 'd', 'c', 'm', 'n', 'b', 'a']]
ASSIGN: ['l', 'm', 'c', 'b', 'a']
Smallist is [myindex] is: ['l', 'm', 'c', 'b', 'a']  its length is 5
ASSIGN: ['l', 'm', 'n', 'b', 'a']
Smallist is [myindex] is: ['l', 'm', 'n', 'b', 'a']  its length is 5
GOTCHA: ['l', 'd', 'c', 'b', 'a']
['d', 'b'] ['a', 'f']
['b', 'a'] ['a', 'f']
['f', 'a'] ['a', 'f']
replaceTo ['l', 'm', 'n', 'b', 'a']
Thing to replace ['a', 'e']
sw a b
sw b d
sw d e
CNOT REPLACEMENT IS: t2 f e
Paths to a c
SELF POSSIBLE PATH IS [['l', 'm', 'c'], ['l', 'm', 'n', 'b', 'c'], ['l', 'd', 'c'], ['l', 'k', 'j', 'f', 'e', 'd', 'c'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c'], ['l', 'k', 'e', 'd', 'c']]
ASSIGN: ['l', 'm', 'c']
Smallist is [myindex] is: ['l', 'm', 'c']  its length is 3
GOTCHA: ['l', 'd', 'c']
['d', 'b'] ['a', 'c']
['b', 'a'] ['a', 'c']
['f', 'e'] ['a', 'c']
['c', 'a'] ['a', 'c']
replaceTo ['l', 'm', 'c']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 c b
Paths to a e
SELF POSSIBLE PATH IS [['l', 'm', 'c', 'b'], ['l', 'm', 'n', 'b'], ['l', 'd', 'c', 'b'], ['l', 'd', 'c', 'm', 'n', 'b'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'b'], ['l', 'k', 'j', 'f', 'e', 'd', 'c', 'm', 'n', 'b'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'b'], ['l', 'k', 'j', 'i', 'g', 'f', 'e', 'd', 'c', 'm', 'n', 'b'], ['l', 'k', 'e', 'd', 'c', 'b'], ['l', 'k', 'e', 'd', 'c', 'm', 'n', 'b']]
ASSIGN: ['l', 'm', 'c', 'b']
Smallist is [myindex] is: ['l', 'm', 'c', 'b']  its length is 4
ASSIGN: ['l', 'm', 'n', 'b']
Smallist is [myindex] is: ['l', 'm', 'n', 'b']  its length is 4
GOTCHA: ['l', 'd', 'c', 'b']
['d', 'b'] ['a', 'e']
['b', 'a'] ['a', 'e']
['f', 'e'] ['a', 'e']
['c', 'b'] ['a', 'e']
['e', 'a'] ['a', 'e']
replaceTo ['l', 'm', 'n', 'b']
Thing to replace ['a', 'd']
sw a b
sw b d
CNOT REPLACEMENT IS: t2 e d
Lines are: ['sw a b', 't2 d b', 'sw a b', 't2 b a\n', 'sw a b', 'sw b d', 'sw d e', 't2 f e', 'sw d e', 'sw b d', 'sw a b', 't1 c\n', 'sw a b', 't2 c b', 'sw a b', 't1 e\n', 'sw a b', 'sw b d', 't2 e d', 'sw b d', 'sw a b']
FIxing the stuff
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
The updated skeleton is: ['ab', 'bd', 'ab', 'ab', 'ab', 'bc', 'cd', 'de', 'ef', 'de', 'bc', 'cd', 'ab', 'ab', 'bc', 'ab', 'ab', 'bc', 'cd', 'de', 'bc', 'cd', 'ab'] , its length is: 23
[('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
The most used quantum gubits are [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
tempDictionary {('q17', 1): ('q17', 12), ('q17', 0): ('q17', 11), ('q17', 2): ('q17', 2), ('q17', 3): ('q17', 13), ('q17', 4): ('q17', 1), ('q17', 5): ('q17', 0)}
items are dict_items([(('q17', 1), ('q17', 12)), (('q17', 0), ('q17', 11)), (('q17', 2), ('q17', 2)), (('q17', 3), ('q17', 13)), (('q17', 4), ('q17', 1)), (('q17', 5), ('q17', 0))])
IBMLAYOUT
{('q17', 1): ('q17', 12), ('q17', 0): ('q17', 11), ('q17', 2): ('q17', 2), ('q17', 3): ('q17', 13), ('q17', 4): ('q17', 1), ('q17', 5): ('q17', 0)}
Length of IBM compiled circuit with fixes is: 2836
{'110100': 300}
Recalculated weights are: {'ab': 9, 'bd': 1, 'bc': 5, 'cd': 4, 'de': 3, 'ef': 1}
[('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
wiggle wiggle
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9), ('b', 15)]
SELFLAYOUTOFQUBIT ('b', 15)
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8), ('a', 9), ('c', 9)]
Placing together b c
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8), ('a', 9)]
Placing together c a
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 8)]
Placing together a d
Self.qubitconnectionscount= [('f', 1), ('e', 4)]
Placing together d e
Self.qubitconnectionscount= [('f', 1)]
Placing together e f
Final layout is {'b': 'm', 'c': 'l', 'a': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Current layout of ctg is: {'b': 'm', 'c': 'l', 'a': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
tempDictionary {('q18', 1): ('q18', 12), ('q18', 2): ('q18', 11), ('q18', 0): ('q18', 2), ('q18', 3): ('q18', 13), ('q18', 4): ('q18', 1), ('q18', 5): ('q18', 0)}
items are dict_items([(('q18', 1), ('q18', 12)), (('q18', 2), ('q18', 11)), (('q18', 0), ('q18', 2)), (('q18', 3), ('q18', 13)), (('q18', 4), ('q18', 1)), (('q18', 5), ('q18', 0))])
IBMLAYOUT
{('q18', 1): ('q18', 12), ('q18', 2): ('q18', 11), ('q18', 0): ('q18', 2), ('q18', 3): ('q18', 13), ('q18', 4): ('q18', 1), ('q18', 5): ('q18', 0)}
['t2 d a\n', 't2 b a\n', 't2 f a\n', 't1 c\n', 't2 c a\n', 't1 e\n', 't2 e a\n']
Self skeleton is ['ad', 'ab', 'af', 'ac', 'ae']
Missing connections are [['a', 'd'], ['a', 'f'], ['a', 'c']]
Paths to a d
SELF POSSIBLE PATH IS [['c', 'b', 'n'], ['c', 'd', 'l', 'm', 'n'], ['c', 'd', 'e', 'f', 'j', 'k', 'l', 'm', 'n'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l', 'm', 'n'], ['c', 'd', 'e', 'k', 'l', 'm', 'n'], ['c', 'm', 'n']]
ASSIGN: ['c', 'b', 'n']
Smallist is [myindex] is: ['c', 'b', 'n']  its length is 3
ASSIGN: ['c', 'm', 'n']
Smallist is [myindex] is: ['c', 'm', 'n']  its length is 3
['d', 'a'] ['a', 'd']
replaceTo ['c', 'm', 'n']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 d b
Paths to a f
SELF POSSIBLE PATH IS [['c', 'b', 'a'], ['c', 'd', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'f', 'j', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'd', 'e', 'k', 'l', 'm', 'n', 'b', 'a'], ['c', 'm', 'n', 'b', 'a']]
ASSIGN: ['c', 'b', 'a']
Smallist is [myindex] is: ['c', 'b', 'a']  its length is 3
['d', 'b'] ['a', 'f']
['b', 'a'] ['a', 'f']
['f', 'a'] ['a', 'f']
replaceTo ['c', 'b', 'a']
Thing to replace ['a', 'e']
sw a e
CNOT REPLACEMENT IS: t2 f e
Paths to a c
SELF POSSIBLE PATH IS [['c', 'b', 'n', 'm', 'l'], ['c', 'd', 'l'], ['c', 'd', 'e', 'f', 'j', 'k', 'l'], ['c', 'd', 'e', 'f', 'g', 'i', 'j', 'k', 'l'], ['c', 'd', 'e', 'k', 'l'], ['c', 'm', 'l']]
ASSIGN: ['c', 'b', 'n', 'm', 'l']
Smallist is [myindex] is: ['c', 'b', 'n', 'm', 'l']  its length is 5
GOTCHA: ['c', 'd', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
GOTCHA: ['c', 'd', 'e', 'k', 'l']
ASSIGN: ['c', 'm', 'l']
Smallist is [myindex] is: ['c', 'm', 'l']  its length is 3
['d', 'b'] ['a', 'c']
['b', 'a'] ['a', 'c']
['f', 'e'] ['a', 'c']
['c', 'a'] ['a', 'c']
replaceTo ['c', 'm', 'l']
Thing to replace ['a', 'b']
sw a b
CNOT REPLACEMENT IS: t2 c b
Lines are: ['sw a b', 't2 d b', 'sw a b', 't2 b a\n', 'sw a e', 't2 f e', 'sw a e', 't1 c\n', 'sw a b', 't2 c b', 'sw a b', 't1 e\n', 't2 e a\n']
FIxing the stuff
Constant field is: 0-----
Length of constants field is: 6
Reached here in preparation of inputs!!!, the inputList is ['0', '0', '0', '0', '0', '1']
The updated skeleton is: ['ab', 'bd', 'ab', 'ab', 'ab', 'bc', 'cd', 'de', 'ef', 'ab', 'bc', 'cd', 'de', 'ab', 'bc', 'ab', 'ae'] , its length is: 17
[('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
The most used quantum gubits are [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
tempDictionary {('q19', 1): ('q19', 12), ('q19', 2): ('q19', 11), ('q19', 0): ('q19', 2), ('q19', 3): ('q19', 13), ('q19', 4): ('q19', 1), ('q19', 5): ('q19', 0)}
items are dict_items([(('q19', 1), ('q19', 12)), (('q19', 2), ('q19', 11)), (('q19', 0), ('q19', 2)), (('q19', 3), ('q19', 13)), (('q19', 4), ('q19', 1)), (('q19', 5), ('q19', 0))])
IBMLAYOUT
{('q19', 1): ('q19', 12), ('q19', 2): ('q19', 11), ('q19', 0): ('q19', 2), ('q19', 3): ('q19', 13), ('q19', 4): ('q19', 1), ('q19', 5): ('q19', 0)}

Length of IBM compiled circuit with fixes is: 3563
{'111100': 300}
Recalculated weights are: {'ab': 7, 'bd': 1, 'bc': 3, 'cd': 2, 'de': 2, 'ef': 1, 'ae': 1}
[('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
wiggle wiggle
Initial self.qubitconnectionscount is [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8), ('b', 11)]
SELFLAYOUTOFQUBIT ('b', 11)
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5), ('c', 5), ('a', 8)]
Placing together b a
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5), ('c', 5)]
Placing together a c
Self.qubitconnectionscount= [('f', 1), ('e', 4), ('d', 5)]
Placing together c d
Self.qubitconnectionscount= [('f', 1), ('e', 4)]
Placing together d e
Self.qubitconnectionscount= [('f', 1)]
Placing together e f
Final layout is {'b': 'm', 'a': 'l', 'c': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
FinalAnswer is: ['sw a b', 't2 d b', 'sw a b', 't2 b a\n', 'sw a b', 'sw b d', 'sw d e', 't2 f e', 'sw d e', 'sw b d', 'sw a b', 't1 c\n', 'sw a b', 't2 c b', 'sw a b', 't1 e\n', 'sw a b', 'sw b d', 't2 e d', 'sw b d', 'sw a b']
FinalAnswer finalLayout: {'b': 'm', 'a': 'l', 'c': 'c', 'd': 'n', 'e': 'b', 'f': 'a'}
FinalAnswer cost is: 2712
CostHistory is: [27, 13, 21, 13, 21, 13, 21, 13, 21, 13]
IBMCostHistory is: [2832, 3321, 2757, 3371, 2712, 3259, 4228, 3104, 2836, 3563]

